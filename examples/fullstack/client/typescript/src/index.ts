
// Code generated by @open-rpc/generator DO NOT EDIT.
import {
  RequestManager,
  PostMessageWindowTransport,
  PostMessageIframeTransport,
  WebSocketTransport,
  HTTPTransport,
  Client,
  JSONRPCError,
} from "@open-rpc/client-js";
import _ from "lodash";
import {
  OpenrpcDocument as OpenRPC,
  MethodObject,
} from "@open-rpc/meta-schema";
import {
  MethodCallValidator,
  MethodNotFoundError,
  parseOpenRPCDocument,
} from "@open-rpc/schema-utils-js";

export type IntegerXZTmW7Mv = number;
export interface ObjectOfIntegerXZTmW7MvDX83NGkO {
  Ok: IntegerXZTmW7Mv;
  [k: string]: any;
}
export type StringDoaGddGA = string;
export interface ObjectOfStringDoaGddGARMaVIgow {
  Err: StringDoaGddGA;
  [k: string]: any;
}
export interface ObjectNullBqFR3LLEAsObject {
  id: IntegerXZTmW7Mv;
  name: StringDoaGddGA;
  password: StringDoaGddGA;
  [k: string]: any;
}
export type ObjectNullBqFR3LLEAsNull = null;
export type ObjectNullBqFR3LLE = ObjectNullBqFR3LLEAsObject | ObjectNullBqFR3LLEAsNull;
export interface ObjectOfObjectNullBqFR3LLEG8XiFg06 {
  Ok: ObjectNullBqFR3LLE;
  [k: string]: any;
}
export type String = string;
export type Int64 = number;
export type ResultOfInt64OrString = ObjectOfIntegerXZTmW7MvDX83NGkO | ObjectOfStringDoaGddGARMaVIgow;
export type ResultOfNullableUserOrString = ObjectOfObjectNullBqFR3LLEG8XiFg06 | ObjectOfStringDoaGddGARMaVIgow;
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfStringInt64Int64ResultOfInt64OrStringResultOfNullableUserOrString = String | Int64 | ResultOfInt64OrString | ResultOfNullableUserOrString;
export type RegisterUser = (name: String, age: Int64) => Promise<ResultOfInt64OrString>;
export type GetUser = (user_id: Int64) => Promise<ResultOfNullableUserOrString>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https" | "postmessagewindow" | "postmessageiframe";
    host: string;
    port: number;
    path?: string;
    protocol?: string;
  };
}

export class OpenspecJsonrpsee {
  public rpc: Client;
  public static openrpcDocument: OpenRPC = {"openrpc":"1.3.2","info":{"title":"openspec-jsonrpsee","version":"0.1.0"},"methods":[{"name":"register_user","params":[{"name":"name","required":true,"schema":{"title":"string","type":"string"},"deprecated":false},{"name":"age","required":true,"schema":{"title":"int64","type":"integer","format":"int64"},"deprecated":false}],"result":{"name":"RegisterUserResponse","required":true,"schema":{"title":"Result_of_int64_or_string","oneOf":[{"type":"object","properties":{"Ok":{"type":"integer","format":"int64"}},"required":["Ok"]},{"type":"object","properties":{"Err":{"type":"string"}},"required":["Err"]}]},"deprecated":false},"deprecated":false},{"name":"get_user","params":[{"name":"user_id","required":true,"schema":{"title":"int64","type":"integer","format":"int64"},"deprecated":false}],"result":{"name":"GetUserResponse","required":true,"schema":{"title":"Result_of_Nullable_User_or_string","oneOf":[{"type":"object","properties":{"Ok":{"type":["object","null"],"properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"password":{"type":"string"}},"required":["id","name","password"]}},"required":["Ok"]},{"type":"object","properties":{"Err":{"type":"string"}},"required":["Err"]}]},"deprecated":false},"deprecated":false}]};
  public dereffedDocument: OpenRPC | undefined;
  public transport:
    | HTTPTransport
    | WebSocketTransport
    | PostMessageWindowTransport
    | PostMessageIframeTransport;
  private validator: MethodCallValidator | undefined;
  private timeout: number | undefined;

  constructor(options: Options) {
    if (
      options.transport === undefined ||
      options.transport.type === undefined
    ) {
      throw new Error("Invalid constructor params");
    }
    const { type, host, port, protocol } = options.transport;
    let path = options.transport.path || "";
    if (path && path[0] !== "/") {
      path = "/" + path;
    }
    switch (type) {
      case 'http':
      case 'https':
        this.transport = new HTTPTransport(
          (protocol || type) + "://" + host + ":" + port + path
        );
        break;
      case 'websocket':
        this.transport = new WebSocketTransport(
          (protocol || "ws://") + host + ":" + port + path
        );
        break;
      case 'postmessageiframe':
        this.transport = new PostMessageIframeTransport(
          protocol + "://" + host + ":" + port + path
        );
        break;
      case 'postmessagewindow':
        this.transport = new PostMessageWindowTransport(
          protocol + "://" + host + ":" + port + path
        );
        break;
      default:
        throw new Error("unsupported transport");
    }
    this.rpc = new Client(new RequestManager([this.transport]));
  }

  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  private async initialize() {
    if (this.validator) {
      return;
    }
    this.dereffedDocument = await parseOpenRPCDocument(OpenspecJsonrpsee.openrpcDocument);
    this.validator = new MethodCallValidator(this.dereffedDocument);
  }

  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
    this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
  public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[OpenspecJsonrpsee.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[OpenspecJsonrpsee.request]] will be added to the batch.
   * Once [[OpenspecJsonrpsee.stopBatch]] is called, the promises for the [[OpenspecJsonrpsee.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[OpenspecJsonrpsee]] calls made since the last [[OpenspecJsonrpsee.startBatch]] call. For
   * that reason, [[OpenspecJsonrpsee.startBatch]] MUST be called before [[OpenspecJsonrpsee.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  private async request(methodName: string, params: any[]): Promise<any> {
    await this.initialize();
    if (this.validator === undefined) {
      throw new Error("internal error");
    }
    const methodObject = _.find(
      (OpenspecJsonrpsee.openrpcDocument.methods as MethodObject[]),
      ({ name }) => name === methodName
    ) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(
      methodName,
      params
    );
    if (
      openRpcMethodValidationErrors instanceof MethodNotFoundError ||
      openRpcMethodValidationErrors.length > 0
    ) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (
      methodObject.paramStructure &&
      methodObject.paramStructure === "by-name"
    ) {
      rpcParams = _.zipObject(_.map(methodObject.params, "name"), params);
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify({ method: methodName, params: rpcParams });
    }
    return this.rpc.request(
      { method: methodName, params: rpcParams },
      this.timeout
    );
  }

  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public register_user: RegisterUser = (...params) => {
    return this.request("register_user", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public get_user: GetUser = (...params) => {
    return this.request("get_user", params);
  }
  
}
export default OpenspecJsonrpsee;
